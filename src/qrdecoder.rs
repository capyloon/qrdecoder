// Generated by `wit-bindgen` 0.4.0. DO NOT EDIT!

#[allow(clippy::all)]
pub mod types {
    #[used]
    #[doc(hidden)]
    #[cfg(target_arch = "wasm32")]
    static __FORCE_SECTION_REF: fn() = super::__link_section;

    #[repr(u8)]
    #[derive(Clone, Copy, PartialEq, Eq)]
    pub enum Level {
        Info,
        Debug,
        Error,
    }
    impl core::fmt::Debug for Level {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                Level::Info => f.debug_tuple("Level::Info").finish(),
                Level::Debug => f.debug_tuple("Level::Debug").finish(),
                Level::Error => f.debug_tuple("Level::Error").finish(),
            }
        }
    }
}

#[allow(clippy::all)]
pub mod console {
    #[used]
    #[doc(hidden)]
    #[cfg(target_arch = "wasm32")]
    static __FORCE_SECTION_REF: fn() = super::__link_section;

    pub type Level = super::types::Level;
    #[allow(clippy::all)]
    pub fn msg(level: Level, msg: &str) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            let vec0 = msg;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;

            #[link(wasm_import_module = "console")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "msg")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "console_msg")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                match level {
                    super::types::Level::Info => 0,
                    super::types::Level::Debug => 1,
                    super::types::Level::Error => 2,
                },
                ptr0,
                len0,
            );
        }
    }
}

pub trait Qrdecoder {
    fn decode_qr(
        image: wit_bindgen::rt::vec::Vec<u8>,
        width: u32,
        height: u32,
    ) -> Option<wit_bindgen::rt::string::String>;
}

#[doc(hidden)]
pub unsafe fn call_decode_qr<T: Qrdecoder>(arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, string::String, vec::Vec};

    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch = "wasm32")]
    wit_bindgen::rt::run_ctors_once();

    let len0 = arg1 as usize;
    let result1 = T::decode_qr(
        Vec::from_raw_parts(arg0 as *mut _, len0, len0),
        arg2 as u32,
        arg3 as u32,
    );
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    match result1 {
        Some(e) => {
            *((ptr2 + 0) as *mut u8) = (1i32) as u8;
            let vec3 = (e.into_bytes()).into_boxed_slice();
            let ptr3 = vec3.as_ptr() as i32;
            let len3 = vec3.len() as i32;
            core::mem::forget(vec3);
            *((ptr2 + 8) as *mut i32) = len3;
            *((ptr2 + 4) as *mut i32) = ptr3;
        }
        None => {
            *((ptr2 + 0) as *mut u8) = (0i32) as u8;
        }
    };
    ptr2
}

#[doc(hidden)]
pub unsafe fn post_return_decode_qr<T: Qrdecoder>(arg0: i32) {
    match i32::from(*((arg0 + 0) as *const u8)) {
        0 => (),
        _ => {
            wit_bindgen::rt::dealloc(
                *((arg0 + 4) as *const i32),
                (*((arg0 + 8) as *const i32)) as usize,
                1,
            );
        }
    }
}

#[allow(unused_imports)]
use wit_bindgen::rt::{alloc, string::String, vec::Vec};

#[repr(align(4))]
struct _RetArea([u8; 12]);
static mut _RET_AREA: _RetArea = _RetArea([0; 12]);

/// Declares the export of the component's world for the
/// given type.

macro_rules! export_qrdecoder(($t:ident) => {
  const _: () = {

    #[doc(hidden)]
    #[export_name = "decode-qr"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __export_qrdecoder_decode_qr(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
      crate::qrdecoder::call_decode_qr::<$t>(arg0,arg1,arg2,arg3,)
    }

    #[doc(hidden)]
    #[export_name = "cabi_post_decode-qr"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_qrdecoder_decode_qr(arg0: i32,) {
      crate::qrdecoder::post_return_decode_qr::<$t>(arg0,)
    }

  };

  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = crate::qrdecoder::__link_section;
});

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:qrdecoder"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 539] = [
    2, 0, 9, 113, 114, 100, 101, 99, 111, 100, 101, 114, 9, 113, 114, 100, 101, 99, 111, 100, 101,
    114, 9, 113, 114, 100, 101, 99, 111, 100, 101, 114, 0, 97, 115, 109, 12, 0, 1, 0, 7, 139, 3, 1,
    65, 7, 1, 66, 2, 1, 109, 3, 4, 105, 110, 102, 111, 5, 100, 101, 98, 117, 103, 5, 101, 114, 114,
    111, 114, 4, 5, 108, 101, 118, 101, 108, 0, 3, 0, 0, 4, 5, 116, 121, 112, 101, 115, 20, 112,
    107, 103, 58, 47, 113, 114, 100, 101, 99, 111, 100, 101, 114, 47, 116, 121, 112, 101, 115, 5,
    0, 2, 3, 0, 0, 5, 108, 101, 118, 101, 108, 1, 66, 4, 2, 3, 2, 1, 1, 4, 5, 108, 101, 118, 101,
    108, 0, 3, 0, 0, 1, 64, 2, 5, 108, 101, 118, 101, 108, 1, 3, 109, 115, 103, 115, 1, 0, 4, 3,
    109, 115, 103, 0, 1, 2, 4, 7, 99, 111, 110, 115, 111, 108, 101, 22, 112, 107, 103, 58, 47, 113,
    114, 100, 101, 99, 111, 100, 101, 114, 47, 99, 111, 110, 115, 111, 108, 101, 5, 2, 1, 65, 9, 1,
    66, 2, 1, 109, 3, 4, 105, 110, 102, 111, 5, 100, 101, 98, 117, 103, 5, 101, 114, 114, 111, 114,
    4, 5, 108, 101, 118, 101, 108, 0, 3, 0, 0, 3, 5, 116, 121, 112, 101, 115, 20, 112, 107, 103,
    58, 47, 113, 114, 100, 101, 99, 111, 100, 101, 114, 47, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0,
    0, 5, 108, 101, 118, 101, 108, 1, 66, 4, 2, 3, 2, 1, 1, 4, 5, 108, 101, 118, 101, 108, 0, 3, 0,
    0, 1, 64, 2, 5, 108, 101, 118, 101, 108, 1, 3, 109, 115, 103, 115, 1, 0, 4, 3, 109, 115, 103,
    0, 1, 2, 3, 7, 99, 111, 110, 115, 111, 108, 101, 22, 112, 107, 103, 58, 47, 113, 114, 100, 101,
    99, 111, 100, 101, 114, 47, 99, 111, 110, 115, 111, 108, 101, 5, 2, 1, 112, 125, 1, 107, 115,
    1, 64, 3, 5, 105, 109, 97, 103, 101, 3, 5, 119, 105, 100, 116, 104, 121, 6, 104, 101, 105, 103,
    104, 116, 121, 0, 4, 4, 9, 100, 101, 99, 111, 100, 101, 45, 113, 114, 0, 1, 5, 4, 9, 113, 114,
    100, 101, 99, 111, 100, 101, 114, 24, 112, 107, 103, 58, 47, 113, 114, 100, 101, 99, 111, 100,
    101, 114, 47, 113, 114, 100, 101, 99, 111, 100, 101, 114, 4, 3, 0, 68, 9, 112, 114, 111, 100,
    117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13,
    119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 5, 48, 46, 55, 46, 52, 16, 119,
    105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 5, 48, 46, 52, 46, 48,
    11, 29, 1, 9, 113, 114, 100, 101, 99, 111, 100, 101, 114, 14, 112, 107, 103, 58, 47, 113, 114,
    100, 101, 99, 111, 100, 101, 114, 3, 0, 0,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
